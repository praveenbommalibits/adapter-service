# .github/workflows/release.yml
name: Release & Publish

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  packages: write
  checks: write
  issues: write
  pull-requests: write

jobs:
  create-release:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Read current version
        id: current_version
        run: |
          VERSION=$(grep "^version" gradle.properties | cut -d'=' -f2 | sed 's/-SNAPSHOT//')
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: version
        run: |
          CURRENT="${{ steps.current_version.outputs.current_version }}"
          IFS='.' read -r major minor patch <<< "$CURRENT"
          case "${{ github.event.inputs.version_type }}" in
            major) major=$((major+1)); minor=0; patch=0 ;;
            minor) minor=$((minor+1)); patch=0 ;;
            patch) patch=$((patch+1)) ;;
          esac
          NEW_VERSION="$major.$minor.$patch"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Calculated new version: $NEW_VERSION"

      - name: Update version in gradle.properties
        run: |
          sed -i "s/^version=.*/version=${{ steps.version.outputs.new_version }}-SNAPSHOT/" gradle.properties

      - name: Commit version bump
        run: |
          git add gradle.properties
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}-SNAPSHOT"
          git push origin main

      - name: Create and push tag
        run: |
          TAG="v${{ steps.version.outputs.new_version }}"
          git tag -a "$TAG" -m "Release version $TAG"
          git push origin "$TAG"

  build-and-publish:
    if: startsWith(github.ref, 'refs/tags/v') || needs.create-release.result == 'success'
    needs: create-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Extract version from tag or create-release
        id: get_version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            VER=${GITHUB_REF#refs/tags/v}
          else
            VER="${{ needs.create-release.outputs.new_version }}"
          fi
          echo "version=$VER" >> $GITHUB_OUTPUT
          echo "version=$VER" >> $GITHUB_ENV

      - name: Build all modules
        run: ./gradlew build -x test -Pversion=${{ steps.get_version.outputs.version }}

      - name: Run tests
        run: ./gradlew test -Pversion=${{ steps.get_version.outputs.version }}

      - name: Publish to GitHub Packages
        run: |
          ./gradlew :adapter-client-starter:publish \
            -Pversion=${{ steps.get_version.outputs.version }}
          ./gradlew :adapter-commons:publish \
            -Pversion=${{ steps.get_version.outputs.version }}
          ./gradlew :adapter-transform-core:publish \
            -Pversion=${{ steps.get_version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: ".github/release-changelog-config.json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
